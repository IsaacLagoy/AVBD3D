// dericatives

for (int i = 0; i < numContacts; i++)
    {
        int row = i * 3;

        if (body == bodyA)
        {
            J[row + 0] = contacts[i].JAn;
            J[row + 1] = contacts[i].JAt1;
            J[row + 2] = contacts[i].JAt2;
        }
        else
        {
            J[row + 0] = contacts[i].JBn;
            J[row + 1] = contacts[i].JBt1;
            J[row + 2] = contacts[i].JBt2;
        }
    }


// computeConstraint

for (int i = 0; i < numContacts; i++)
    {
        int row = i * 3;

        vec3 dpA = bodyA->position - bodyA->initial;
        vec3 dpB = bodyB->position - bodyB->initial;

        // Normal constraint (index 0)
        C[row + 0] = contacts[i].C0.x * (1 - alpha)
                   + glm::dot(contacts[i].JAn, dpA)
                   + glm::dot(contacts[i].JBn, dpB);

        // Tangent constraint 1
        C[row + 1] = contacts[i].C0.y * (1 - alpha)
                   + glm::dot(contacts[i].JAt1, dpA)
                   + glm::dot(contacts[i].JBt1, dpB);

        // Tangent constraint 2
        C[row + 2] = contacts[i].C0.z * (1 - alpha)
                   + glm::dot(contacts[i].JAt2, dpA)
                   + glm::dot(contacts[i].JBt2, dpB);

        // Friction bounds update (±μ * |λ_normal|)
        float frictionBound = abs(lambda[row + 0]) * friction;

        fmax[row + 1] = frictionBound;
        fmin[row + 1] = -frictionBound;

        fmax[row + 2] = frictionBound;
        fmin[row + 2] = -frictionBound;

        // Stick detection (for warm-starting and persistent contact tracking)
        bool stick1 = abs(lambda[row + 1]) < frictionBound && abs(contacts[i].C0.y) < STICK_THRESH;
        bool stick2 = abs(lambda[row + 2]) < frictionBound && abs(contacts[i].C0.z) < STICK_THRESH;
        contacts[i].stick = stick1 && stick2;
    }

// inner contact loop
for (int i = 0; i < numContacts; i++) {
        // Contact normal
        vec3 normal = contacts[i].normal;

        // Construct orthonormal basis: (tangent1, tangent2, normal)
        vec3 tangent1, tangent2;
        {
            // Arbitrary vector not parallel to the normal
            vec3 arbitrary = fabs(normal.x) < 0.9f ? vec3{1, 0, 0} : vec3{0, 1, 0};
            tangent1 = normalize(cross(normal, arbitrary));
            tangent2 = cross(normal, tangent1);
        }

        // Contact basis matrix: columns = normal, tangent1, tangent2
        // Optional: if you want to store this as a mat3
        mat3x3 basis = mat3x3(normal, tangent1, tangent2);

        // World-space contact offsets from centers of mass
        vec3 rAW = rotate(bodyA->rotation, contacts[i].rA); // apply bodyA rotation to local rA
        vec3 rBW = rotate(bodyB->rotation, contacts[i].rB); // same for bodyB

        // Jacobians: Linear (3) + Angular (3)
        contacts[i].JAn = vec6{ normal, cross(rAW, normal) };
        contacts[i].JBn = vec6{ -normal, -cross(rBW, normal) };

        contacts[i].JAt1 = vec6{ tangent1, cross(rAW, tangent1) };
        contacts[i].JBt1 = vec6{ -tangent1, -cross(rBW, tangent1) };

        contacts[i].JAt2 = vec6{ tangent2, cross(rAW, tangent2) };
        contacts[i].JBt2 = vec6{ -tangent2, -cross(rBW, tangent2) };

        // Positional error in contact space (3D)
        vec3 worldPA = bodyA->position + rAW;
        vec3 worldPB = bodyB->position + rBW;
        vec3 delta = worldPA - worldPB;

        // Project delta into contact space using basis
        vec3 contactDelta = transpose(basis) * delta;

        // Add collision margin along normal only
        contactDelta += vec3{ COLLISION_MARGIN, 0, 0 };

        contacts[i].C0 = contactDelta;
    }